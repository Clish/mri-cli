#!/usr/bin/env node

'use strict';

// mri component ${componentName} [-w] [targetPath]

const program  = require('commander');
const join     = require('path').join;
const readFile = require('fs').readFileSync;
const fs       = require('fs-extra');
const _        = require('lodash');
const chalk    = require('chalk');

const DEF_OUT_PATH = {
    component: './src/components',
    widget: './src/widgets',
};
const FILES        = [
    { name: 'index.ts',     temp: '../template/component/index' },
    { name: 'styles.less',  temp: '../template/component/styles' },
    { name: '$_{name}.tsx', temp: '../template/component/main' },
];

program
    .usage('componentName [options] targetPath')
    .option('-w, --widget', 'create component as widget ')
    .parse(process.argv);

const { args, widget: isWidget } = program;
const comType = isWidget ? 'widget' : 'component';
const outPath = args[1] || DEF_OUT_PATH[comType];

checkValidity(args[0])();
if(!fs.existsSync(outPath)) {
    console.log(chalk.red('Please specify a valid path.'));
    return void 0;
}

const dirPath = join(outPath, args[0]);
if(fs.existsSync(dirPath)) {
    console.log(chalk.red(`The name of ${args[0]} ${comType} has already exists. `));
    console.log(chalk.green(`Please define a new name and create it. `));
    return void 0;
}
fs.mkdirSync(dirPath);

_.forEach(FILES, file => {
    let content = readFile(join(__dirname, file.temp), { encoding: 'utf8' });
    fs.outputFileSync(join(dirPath, replaceName(file.name)), replaceName(content));
});

console.log(chalk.green(`Successfully generated ${comType} at ${dirPath}.`));

function replaceName(str) {
    let className = args[0].split('-').map(str => _.upperFirst(str)).join('');
    return str.replace(/\$_\{name\}/ig, args[0]).replace(/\$_\{className\}/ig, className);
}

function checkValidity(argument) {
    if(!!argument) return () => {};
    return () => {
        program.help();
        return void 0;
    };
}