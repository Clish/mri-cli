#!/usr/bin/env node

/**
 *  mri dev ${theme}
 *  启动 MRI 项目
 */

'use strict';

const _program = require('commander');
const _fse = require('fs-extra');
const _exists = require('fs').existsSync;
const _readFileSync = require('fs').readFileSync;
const _createReadStream = require('fs').createReadStream;
const _join = require('path').join;
const _ = require('lodash');
const _chalk = require('chalk');
const _shell = require('shelljs');
const {log, error, debug} = console;
const {green, red, yellow, grey} = _chalk;

const $command = require('../service/command');
const $util = require('../service/util');
const $pages = require('../service/pages');
const $env = require('../service/env');
const $insertThemeIndex = require('../service/insertThemeIndex');

const MRI_ENV = 'prod';

// 设置 command 信息
$command(MRI_ENV);

// 获得当前运行主题
const theme = _program.args[0];



if(!theme) {
    error(`${red('### ERRO =>')} theme 未输入`);
    return void 0;
} else {}

/**
 * // @todo 检测当前主题是否存在
 * 检测 src/theme/${theme} 是否存在
 */

log(`---=> 检测当前主题是否存在`);

/**
 * // @todo 检测配置文件
 * @type {string}
 */

log(`---=> 检测当前主题配置文件是否完整`);

/**
 * 生成 pages 文件
 */

if(!$pages(theme, MRI_ENV)) {
    error(red(`@@@=> 路由文件写入失败`));
    return void 0;
}

/**
 * 写入 src/theme/index.ts
 */
$insertThemeIndex(theme);


log(`\n\n---=> 读取环境配置信息`);

let env = $env(theme, MRI_ENV);

log(`\n\n---=> 正在编译主题 => ${green(theme)}` );

_shell.exec(`
    _cross=./node_modules/.bin/cross-env
    _umi=./node_modules/.bin/umi
    echo 'umi ${env}' 
    $_umi -v 
    $_cross MRI_ENV=${MRI_ENV} ${env} $_umi build
`);







