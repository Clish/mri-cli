#!/usr/bin/env node

/**
 *  mri dev ${project}
 *  启动 MRI 项目
 */

'use strict';
const _program = require('commander');
const $run = require('../lib/common/run');
const $log = require('../lib/common/log');
const $task = require('../lib/services/task');

const pk = require('../package.json');
const task = 'prod';

_program
    .usage('mri test [options]')
    .description('运行MRI的生产环境')
    .description(
        '更多的环境变量\n  参考 https://umijs.org/guide/env-variables.html\n  在src/project/${project}/${project}-config.js 中进行配置',
    )
    .option('-c, --BABEL_CACHE', '是否使用BabelCache模式')
    .option('-n, --no-install', '忽略安装包更新')
    .option('-i, --interface', '生成const interface文件')
    .option('-d, --debug', 'debug 模式')
    .option('-s, --service [name]', '服务器环境')
    .option('-b, --branch', '不切换到test, 当前分支下运行命令')
    .version(pk.version);

_program.parse(process.argv);

$log.title(`mri prod [project] 项目生成环境打包代码`);

const branch = _program.branch ? 'all' : 'master';
const project = _program.args[0];

// 在当前分支下执行工作
$run.branch('all', () => {
    // 在根目录下工作
    $run.root(() => {
        // mri react 启动初始化工作
        $run.init(() => {
            // mri 配置初始化
            $run.mri(() => {
                // mri 项目JS package 管理
                $run.package(() => {
                    // 启动其项目
                    $task.run(task, project);
                    // mri 版本管理
                    // 编译，生产，测试环境版本不升级
                    // $run.upgrade(() => {});
                });
            });
        });
    });
});
