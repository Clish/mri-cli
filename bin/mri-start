#!/usr/bin/env node

'user strict';

const program  = require('commander');
const fse      = require('fs-extra');
const exists   = require('fs').existsSync;
const readFile = require('fs').readFileSync;
const join     = require('path').join;
const _        = require('lodash');

const DEF_PAGES_PATH = './src/pages';
const DEF_INDEX = 'index';

program
    .usage('[options] jsonPath targetPath')
    .option('-t, --ts', 'create index file with .ts')
    .option('-j, --js', 'create index file with .js')
    .parse(process.argv);

const args = program.args[0];
const fileSuffix = program.ts ? '.ts' : '.js';

printHelp(!args)();

const filePath = executable(args);
printHelp(!filePath)();
// load file of pages config
const { routes } = JSON.parse(readFile(filePath, 'utf8'));
printHelp(!routes)();
// create clean page dir
const pagePath = join(process.cwd(), program.args[1] || DEF_PAGES_PATH);
if(exists(pagePath)) fse.removeSync(pagePath);
fse.mkdirsSync(pagePath);
// create files
_.forEach(routes, ({ path = [] }, name) => {
    path = _.uniq(path.map(item => _.trim(_.replace(item, '/' + DEF_INDEX, ''), '/')));
    _.forEach(path, str => {
        if(!str) str = DEF_INDEX;
        let filePath = createPageDir(str.split('/'), pagePath);
        writeFile(join(filePath, `${DEF_INDEX}${fileSuffix}`), name);
    });
});

function createPageDir(arr, pagePath) {
    _.forEach(arr, dir => {
        pagePath = join(pagePath, './' + dir);
        if(!exists(pagePath)) fse.mkdirsSync(pagePath);
    });
    return pagePath;
}

function writeFile(path, name) {
    fse.outputFileSync(path, `
        import $theme from 'src/theme';
        let module = $theme.getModule('${name}');
        let component = module.component;
        export default component;
    `);
}

function isFile(str) {
    let endStr = str.slice(str.length - 3);
    return _.indexOf(['.js', '.ts'], endStr) !== -1;
}

function executable(filePath) {
    let file = join(process.cwd(), filePath);
    if (exists(file)) return file;
}

function printHelp(isNext) {
    if(!!isNext) {
        return function() {
            program.help();
            return;
        }
    }
    return function() {};
}
