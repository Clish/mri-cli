#!/usr/bin/env node

'use strict';

const _program = require('commander');
const _shell = require('shelljs');
const _ = require('lodash');
const _chalk = require('chalk');

const $git = require('../service/git');
const $root = require('../service/root');

const helper = () => {
    console.log('\n', 'THEMES');
    $root.getThemes();
    console.log('\n');
};

/**
 * ----------------
 * 主程序
 * ----------------
 */

_program
    .usage('feature [ver]')
    .option('--start', '创建release')
    .option('--force', '强力模式，无需在release下创建feature')
    .option('--finish', '关闭release(只删除本地分支)')
    .option('--remote', '是否推送到远程')
    .on('--help', helper)
    .parse(process.argv);

let [feature, forceBranch] = _.trim(_program.args[0] || '').split('::');
let {start, finish, remote, force} = _program;


if(start && finish && test) {
    console.error(_chalk.red(`\n --start, --finish, --test 不可以同时使用\n`));
}

/**
 * 校正参数
 */
if(!_.isNil(forceBranch)){
    start = true;
}

if(finish) {
    force = true;
}

/**
 * 程序开始
 */

let branchGrep = `git branch | grep "*" | grep "release" | cut -c 3-`;

// 强力模式获得当前branch
if(force) {
    branchGrep = `git branch | grep "*" | cut -c 3-`;
}

/**
 * 查看当前的branch,
 * feature 只能在release下创建
 */

let branch = _shell.exec(branchGrep).stdout;
branch = branch.replace(/\n/g, '');

if(!branch) {
    console.error(_chalk.red(`\n feature只能在release分支下创建，当前分支不是release分支\n`));
    return void 0;
}

/**
 * 查看该branch的feature的创建情况
 */
if(!start && !finish) {
    _shell.exec(`
        _branch=${branch}
        
        echo ""
        echo "请使用 mri git feature [featureName] --start 创建release"
        echo ""
        
        echo "下列为该 $_branch 的feature信息"
        git branch -a | grep $_branch || echo '- 未查询到相关版本信息'
    `);

    return void 0;
}

if(finish) {
    if(branch.indexOf('feature') > -1) {

        let release = forceBranch || branch.replace(/^feature\//, 'release/').replace(/^(.*?)-.*/g, '$1');

        _shell.exec(`
            _release=${release}
            git checkout $_release || git checkout master
            git branch -D ${branch}
        `)
    } else {
        console.error(_chalk.red(`\n 该分支不是feature分支\n`));
    }
    return void 0;
}

if(!feature) {
    console.error(_chalk.red(`\n 请输入预创建的分支名\n`));
    console.log(`feature分支名建议以 beat.n 命名，如 beat.1`);
}

/**
 * 创建分支信息
 */
if(start) {
    forceBranch = forceBranch || branch;
    let featureBranch = forceBranch.replace('release', 'feature') + '-' + feature;
    if(featureBranch.indexOf('feature') < 0) {
        featureBranch = 'feature/' + featureBranch;
    }

    _shell.exec(`
         _feature=${featureBranch}
         git pull origin ${branch}
         git branch ${featureBranch}
         if [ $? -eq 0 ]; then
            git checkout $_feature
            ${remote ? 'git push origin $_feature' : ''}
            ${remote ? 'git branch --set-upstream-to=origin/$_feature $_feature' : ''}
            git checkout $_feature
        else
            echo ------------
            echo 该分支已创建
            echo ------------
            git checkout $_feature
        fi
    `);

    return void 0;
}

if(test) {
    _shell.exec(`
        _branch=\`git branch | grep "*" | grep "feature"\`
        if [ "$_branch" == "" ]; then
            echo ''
            echo '- 当前所在分支不是feature, 请确认'
            echo ''
            echo Branch
            git branch
        else
            git checkout test
            git pull origin test
            git merge $_branch
            if [ $? -ne 0 ]; then
                echo 有冲突，请先解决冲突，再提交test
                echo "$1" 1>&2
                exit 1
            else
                git add . && git commit -am '$_branch' && git pull && git push
            fi
        fi 
    `);

    return void 0;
}
